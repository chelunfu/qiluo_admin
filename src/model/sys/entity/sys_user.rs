//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sys_user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub tenant_id: String,
    pub dept_id: i64,
    pub role_id: i64,
    pub user_name: String,
    pub nick_name: String,
    pub user_type: Option<String>,
    pub email: Option<String>,
    pub phonenumber: Option<String>,
    pub sex: Option<String>,
    pub avatar: Option<String>,
    pub password: String,
    pub status: Option<String>,
    pub login_ip: Option<String>,
    pub login_date: Option<DateTime>,
    pub create_dept: Option<i64>,
    pub create_by: Option<i64>,
    pub created_at: Option<DateTime>,
    pub update_by: Option<i64>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
    pub remark: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::sys_user_dept::Entity")]
    SysUserDept,
    #[sea_orm(has_many = "super::sys_user_post::Entity")]
    SysUserPost,
    #[sea_orm(has_many = "super::sys_user_role::Entity")]
    SysUserRole,
}

impl Related<super::sys_user_dept::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysUserDept.def()
    }
}

impl Related<super::sys_user_post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysUserPost.def()
    }
}

impl Related<super::sys_user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysUserRole.def()
    }
}

impl Related<super::sys_dept::Entity> for Entity {
    fn to() -> RelationDef {
        super::sys_user_dept::Relation::SysDept.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sys_user_dept::Relation::SysUser.def().rev())
    }
}

impl Related<super::sys_post::Entity> for Entity {
    fn to() -> RelationDef {
        super::sys_user_post::Relation::SysPost.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sys_user_post::Relation::SysUser.def().rev())
    }
}

impl Related<super::sys_role::Entity> for Entity {
    fn to() -> RelationDef {
        super::sys_user_role::Relation::SysRole.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sys_user_role::Relation::SysUser.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
