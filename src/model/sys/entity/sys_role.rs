//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sys_role")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub role_id: i64,
    pub role_name: String,
    pub role_key: String,
    pub order: i32,
    pub data_scope: String,
    pub status: String,
    pub create_dept: Option<i64>,
    pub remark: Option<String>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::sys_role_dept::Entity")]
    SysRoleDept,
    #[sea_orm(has_many = "super::sys_role_menu::Entity")]
    SysRoleMenu,
    #[sea_orm(has_many = "super::sys_user_role::Entity")]
    SysUserRole,
}

impl Related<super::sys_role_dept::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysRoleDept.def()
    }
}

impl Related<super::sys_role_menu::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysRoleMenu.def()
    }
}

impl Related<super::sys_user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysUserRole.def()
    }
}

impl Related<super::sys_dept::Entity> for Entity {
    fn to() -> RelationDef {
        super::sys_role_dept::Relation::SysDept.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sys_role_dept::Relation::SysRole.def().rev())
    }
}

impl Related<super::sys_menu::Entity> for Entity {
    fn to() -> RelationDef {
        super::sys_role_menu::Relation::SysMenu.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sys_role_menu::Relation::SysRole.def().rev())
    }
}

impl Related<super::sys_user::Entity> for Entity {
    fn to() -> RelationDef {
        super::sys_user_role::Relation::SysUser.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sys_user_role::Relation::SysRole.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
